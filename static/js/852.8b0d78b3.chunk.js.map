{"version":3,"file":"static/js/852.8b0d78b3.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/EditForm/EditForm.styled.jsx","components/EditForm/EditForm.jsx","components/DeleteMenu/DeleteMenu.styled.jsx","components/DeleteMenu/DeleteMenu.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// import { statusFilters } from './constants';\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterName) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterName.toLowerCase().trim())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[5]}px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts.operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { Form } from './ContactForm.styled';\nimport { Input, Label, Button } from 'commonStyles/coommonStyles.styled';\nimport { FaPhoneSquareAlt } from 'react-icons/fa';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  // console.log('first');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n\n    const repeatingName = contacts.find(contact => contact.name === name);\n\n    if (repeatingName) {\n      alert(`${name} is already in contacts.`);\n      return null;\n    }\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <Form className=\"form\" onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          // value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          // value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">\n        <FaPhoneSquareAlt /> Add contact\n      </Button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: ${p => p.theme.space[4]}px;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid;\n\n  gap: ${p => p.theme.space[6]}px;\n  font-weight: ${p => p.theme.fontWeights.bold};\n  @media screen and (max-width: 480px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    gap: ${p => p.theme.space[4]}px;\n  }\n`;\nexport const ItemName = styled.span`\n  /* max-width: 200px; */\n  /* overflow-wrap: break-word; */\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  /* @media screen and (max-width: 480px) {\n    inline-size: 165px;\n  } */\n`;\n\nexport const ContactWrap = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: ${p => p.theme.space[2]}px;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\nexport const ModalWrapper = styled.div`\n  background-color: ${p => p.theme.colors.white};\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n  border: 1px solid;\n      border-radius:8px;\n`;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { Overlay, ModalWrapper } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport function Modal({ onClose, children }) {\n  useEffect(() => {\n    document.addEventListener('keydown', handleClose);\n    return () => {\n      document.removeEventListener('keydown', handleClose);\n    };\n  });\n\n  const handleClose = e => {\n    // console.log('keydown event: ', e);\n    if (e.code === 'Escape') {\n      onClose();\n    }\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleClose}>\n      <ModalWrapper>{children}</ModalWrapper>\n    </Overlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[5]}px;\n  padding: 20px;\n  border: 1px solid;\n      border-radius:8px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from 'redux/contacts/contacts.operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { Form } from './EditForm.styled';\nimport { Input, Label, Button } from 'commonStyles/coommonStyles.styled';\nimport { FaPhoneSquareAlt } from 'react-icons/fa';\nimport { useState } from 'react';\n\nexport default function EditForm({ contact, onClose }) {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  // console.log('first');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        alert(`case ${name} doesn't support`);\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const repeatingName = contacts.find(contact => contact.name === name);\n\n    if (repeatingName) {\n      alert(`${name} is already in contacts.`);\n      return null;\n    }\n\n    try {\n      dispatch(editContact({ id: contact.id, name, number }));\n    } catch (error) {}\n    alert(`contact ${name} was successfully changed`);\n    onClose();\n  };\n\n  return (\n    <Form className=\"form\" onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">\n        <FaPhoneSquareAlt /> Edit contact\n      </Button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[5]}px;\n  padding: 20px;\n  border: 1px solid;\n  border-radius: 8px;\n`;\n\nexport const Title = styled.p`\n  text-align: center;\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n\nexport const BtnWrapper = styled.ul`\n  display: flex;\n  justify-content: space-around;\n`;\n","import { Button } from 'commonStyles/coommonStyles.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts.operations';\nimport { BtnWrapper, Title, Wrapper } from './DeleteMenu.styled';\n\nexport const DeleteMenu = ({ userId, onClose }) => {\n  const dispatch = useDispatch();\n  return (\n    <Wrapper>\n      <Title>Are you sure you want to delete this contact?</Title>\n      <BtnWrapper>\n        <li>\n          <Button onClick={() => dispatch(deleteContact(userId))}>YES</Button>\n        </li>\n        <li>\n          <Button onClick={onClose}>NO</Button>\n        </li>\n      </BtnWrapper>\n    </Wrapper>\n  );\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from 'commonStyles/coommonStyles.styled';\nimport { ContactWrap, Item, ItemName } from './ContactListItem.styled';\nimport {\n  FaPhoneAlt,\n  FaUserAlt,\n  FaRegTrashAlt,\n  FaUserEdit,\n} from 'react-icons/fa';\n\nimport { Modal } from 'components/Modal/Modal';\nimport EditForm from 'components/EditForm/EditForm';\nimport { DeleteMenu } from 'components/DeleteMenu/DeleteMenu';\n\nconst ContactListItem = ({ id, number, name }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [userIdState, setUserIdState] = useState('');\n  return (\n    <Item key={id}>\n      <Button type=\"button\" onClick={() => setIsModalOpen(isOpen => !isOpen)}>\n        <FaUserEdit />\n      </Button>\n      <ContactWrap>\n        <ItemName>\n          <FaUserAlt fill=\"orange\" /> {name}:\n        </ItemName>\n        <span>\n          <FaPhoneAlt fill=\"orange\" /> {number}\n        </span>\n      </ContactWrap>\n      <Button type=\"button\" onClick={() => setUserIdState(id)}>\n        <FaRegTrashAlt />\n      </Button>\n      {isModalOpen && (\n        <Modal onClose={() => setIsModalOpen(isOpen => !isOpen)}>\n          <EditForm\n            contact={{ name, number, id }}\n            onClose={() => setIsModalOpen(isOpen => !isOpen)}\n          />\n        </Modal>\n      )}\n      {userIdState && (\n        <Modal onClose={() => setUserIdState('')}>\n          <DeleteMenu userId={userIdState} onClose={() => setUserIdState('')} />\n        </Modal>\n        //\n      )}\n    </Item>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import { List } from './ContactList.styled';\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  // console.log('object');\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {contacts.map(({ id, number, name }) => (\n        <ContactListItem key={id} id={id} number={number} name={name} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { Input, Label } from 'commonStyles/coommonStyles.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        // value={filter}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </Label>\n  );\n};\n\nexport default Filter;\n","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\n// import { TaskList } from 'components/TaskList/TaskList';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Box } from '../commonStyles/Box';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts.operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  //   const dispatch = useDispatch();\n  //   const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {/* <Helmet>\n        <title>Your contacts</title>\n      </Helmet> */}\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        gridGap={5}\n        as=\"section\"\n      >\n        <h1>Phonebook</h1>\n        {isLoading && !error && <b>Request in progress...</b>}\n        {error && <b>{error}</b>}\n        <ContactForm />\n      </Box>\n\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        gridGap={5}\n        as=\"section\"\n      >\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Box>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","filterName","contact","name","toLowerCase","includes","trim","Form","styled","p","theme","space","ContactForm","useSelector","dispatch","useDispatch","className","onSubmit","e","preventDefault","target","value","number","find","alert","newContact","addContact","reset","type","pattern","title","required","List","Item","fontWeights","bold","fontSizes","s","ItemName","ContactWrap","Overlay","ModalWrapper","colors","white","modalRoot","document","querySelector","Modal","onClose","children","useEffect","addEventListener","handleClose","removeEventListener","code","currentTarget","createPortal","onClick","EditForm","useState","setName","setNumber","handleChange","repeatingName","editContact","id","onChange","Wrapper","Title","BtnWrapper","DeleteMenu","userId","deleteContact","isModalOpen","setIsModalOpen","userIdState","setUserIdState","isOpen","fill","map","setFilter","ContactsPage","fetchContacts","Box","display","flexDirection","alignItems","gridGap","as"],"sourceRoot":""}